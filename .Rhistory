InitialFraction=c(1.0081,1.0898,1.0956,1.006,1.0472,1.0143,1.0972,1.075,1.042,1.1052,1.0843,1.1112,1.1307,1.0295,1.0876,
1.0922,1.0177,1.0061,1.1301,1,1.0449,1.042,1.0661,1.084,1.1228,1.0606,1.0922,1.0006,1.1265,0.6735,1.1719,
1.1156,1.1061,1.0003,1.03,0.177),
FinalFraction=c(0.3229,0.3489,0.4098,0.3345,0.3921,0.347,0.3605,0.3181,0.3762,0.3595,0.3908,0.3366,0.3304,0.2948,0.3787,
0.3511,0.3385,0.3318,0.2833,0.2189,0.3299,0.3175,0.3336,0.2582,0.3676,0.3627,0.3539,0.3414,0.4577,0.2734,
0.3842,0.3237,0.3903,0.311,0.2147,0.0671))
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
end.rcode-->
</div>
<br/>
</div>
<div class="container">
<h4 class="header-light regular-pad">Structure of the input files</h4>
<p><font size="3"><font color='1F618D'><b><i>leafdecay</i></b></font> requires 7 input objects:
<br/><b>Day</b>: Time in which a leaf pack is collected.
<br/><b>Treatment</b>: Different groups evaluated.
<br/><b>Replicate</b>: Number of independent samples deployed in different pools.
<br/><b>InitialWt</b>: Initial mass (dry mass) of the leaf packs.
<br/><b>FinalWt</b>: Final mass (dry mass) of the leaf packs.
<br/><b>Frac.InitialWt</b>: Initial mass of a fraction of the leaf pack to be burned (AFDM).
<br/><b>Frac.FinalWt </b>: Final mass of a fraction of the leaf pack that has been burned (AFDM).
<br/>
<br/>The easiest way to get these objects into <font color='1F618D'><b><i>leafdecay</i></b></font> is to create an Excel file or similar, and then copying it across as in the following example:
</font></p>
<!--begin.rcode
RioPriedras
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 1: Calculating the loss of litter mass by handling</h4>
<p><font size="3">Dried leaves are easily broken in handling. Therefore, extra leaf packs are necessary to account for losses during fashioning, transporting, and placing the packs in the stream. The extra leaf packs will be used to correct by “handling losses”, and are often called <b>Control</b>.</font></p>
<p><font size="3">To load the data into <font color='1F618D'><b><i>leafdecay</i></b></font> use: </font></p>
<!--begin.rcode
control <- manipulation(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Treatment= Control)
control
end.rcode-->
<p><font size="3">This means that we lost 1.76334% due to handling.</font></p>
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 2: Percentage of AFDM Remaining</h4>
<p><font size="3">The <i>AFDM()</i> function convert leaf pack dry mass to AFDM remaining (AFDMrem) as percentage. Also, this function converts the values of AFDMrem to LN (Ln.AFDMrem), which makes it easy to compare the remaining leaf mass against time in the following function (<i>slope.k()</i>).</font></p>
<!--begin.rcode
remaining <- AFDM(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Frac.InitialWt= InitialFraction,
Frac.FinalWt= FinalFraction,
Treatment= Treatment,
Day= Day,
Replicate= Replicate)
remaining
remaining
remaining
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 3: Calculating the decomposition rate (<i>-k</i>)</h4>
<p><font size="3"> The <i>slope.k()</i> function relates the LN.AFDM values against time to obtain the slope that is equal to the decomposition rate  (<i>-k</i>). This procedure is run for each replica, which allows subsequent analyzes using the different <i>-k</i>. </font></p>
<!--begin.rcode
slope.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
end.rcode-->
</div>
rsquared.k(data = remaining)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
<!--begin.rcode message=FALSE
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
<!--begin.rcode include=FALSE
control <- data.frame(Day=c(0,0,0,0,0,0),
Treatment=c("Control","Control","Control","Control","Control","Control"),
Replicate=c(1,1,1,1,1,1),
InitialWt=c(5.010,5.010,5.010,5.010,5.010,5.000),
FinalWt=c(4.990,4.940,4.840,4.820,4.960,4.970),
InitialFraction=c(1.1071,1.1964,1.0647,1.0005,1.0453,1.1212),
FinalFraction=c(0.3858,0.3504,0.4248,0.3333,0.3417,0.3467))
sites <-data.frame(Day=c(2,4,8,16,32,44),
Treatment=c("CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC", "CC","CC","CC",
"QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC"),
Replicate=c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3),
InitialWt=c(5,5,5,5,5.01,5,5,5.01,5,5,5.01,5,5,5,5,5.01,5,5,5.01,5,5.01,5,5,5.01,5,5.01,5,5,5,5,5.01,5,5.01,5,5.01,5.01),
FinalWt=c(4.65,4.64,4.17,4,4.26,3.7,4.63,4.37,3.72,3.99,3.3,3.75,4.67,4.37,4.12,3.64,3.47,3.3,4.91,4.52,4.54,3.66,2.46,1.82,
4.66,4.25,4.02,3.33,2.29,0.9,4.68,4.58,4.02,3.21,0.9,0.37),
InitialFraction=c(1.0081,1.0898,1.0956,1.006,1.0472,1.0143,1.0972,1.075,1.042,1.1052,1.0843,1.1112,1.1307,1.0295,1.0876,
1.0922,1.0177,1.0061,1.1301,1,1.0449,1.042,1.0661,1.084,1.1228,1.0606,1.0922,1.0006,1.1265,0.6735,1.1719,
1.1156,1.1061,1.0003,1.03,0.177),
FinalFraction=c(0.3229,0.3489,0.4098,0.3345,0.3921,0.347,0.3605,0.3181,0.3762,0.3595,0.3908,0.3366,0.3304,0.2948,0.3787,
0.3511,0.3385,0.3318,0.2833,0.2189,0.3299,0.3175,0.3336,0.2582,0.3676,0.3627,0.3539,0.3414,0.4577,0.2734,
0.3842,0.3237,0.3903,0.311,0.2147,0.0671))
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
end.rcode-->
</div>
<br/>
</div>
<div class="container">
<h4 class="header-light regular-pad">Structure of the input files</h4>
<p><font size="3"><font color='1F618D'><b><i>leafdecay</i></b></font> requires 7 input objects:
<br/><b>Day</b>: Time in which a leaf pack is collected.
<br/><b>Treatment</b>: Different groups evaluated.
<br/><b>Replicate</b>: Number of independent samples deployed in different pools.
<br/><b>InitialWt</b>: Initial mass (dry mass) of the leaf packs.
<br/><b>FinalWt</b>: Final mass (dry mass) of the leaf packs.
<br/><b>Frac.InitialWt</b>: Initial mass of a fraction of the leaf pack to be burned (AFDM).
<br/><b>Frac.FinalWt </b>: Final mass of a fraction of the leaf pack that has been burned (AFDM).
<br/>
<br/>The easiest way to get these objects into <font color='1F618D'><b><i>leafdecay</i></b></font> is to create an Excel file or similar, and then copying it across as in the following example:
</font></p>
<!--begin.rcode
RioPriedras
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 1: Calculating the loss of litter mass by handling</h4>
<p><font size="3">Dried leaves are easily broken in handling. Therefore, extra leaf packs are necessary to account for losses during fashioning, transporting, and placing the packs in the stream. The extra leaf packs will be used to correct by “handling losses”, and are often called <b>Control</b>.</font></p>
<p><font size="3">To load the data into <font color='1F618D'><b><i>leafdecay</i></b></font> use: </font></p>
<!--begin.rcode
control <- manipulation(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Treatment= Control)
control
end.rcode-->
<p><font size="3">This means that we lost 1.76334% due to handling.</font></p>
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 2: Percentage of AFDM Remaining</h4>
<p><font size="3">The <i>AFDM()</i> function convert leaf pack dry mass to AFDM remaining (AFDMrem) as percentage. Also, this function converts the values of AFDMrem to LN (Ln.AFDMrem), which makes it easy to compare the remaining leaf mass against time in the following function (<i>slope.k()</i>).</font></p>
<!--begin.rcode
remaining <- AFDM(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Frac.InitialWt= InitialFraction,
Frac.FinalWt= FinalFraction,
Treatment= Treatment,
Day= Day,
Replicate= Replicate)
remaining
remaining
remaining
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 3: Calculating the decomposition rate (<i>-k</i>)</h4>
<p><font size="3"> The <i>slope.k()</i> function relates the LN.AFDM values against time to obtain the slope that is equal to the decomposition rate  (<i>-k</i>). This procedure is run for each replica, which allows subsequent analyzes using the different <i>-k</i>. </font></p>
<!--begin.rcode
slope.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 4: Calculating the r-Squared</h4>
<p><font size="3"> The <i>rsquared.k()</i> function shows the regression fit (LN.AFDM vs time) and the <i>p</i>-value for each replica. </font></p>
<!--begin.rcode
rsquared.k(data = remaining)
end.rcode-->
</div>
rsquared.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
<!--begin.rcode message=FALSE
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
<!--begin.rcode message=FALSE
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
<!--begin.rcode include=FALSE
control <- data.frame(Day=c(0,0,0,0,0,0),
Treatment=c("Control","Control","Control","Control","Control","Control"),
Replicate=c(1,1,1,1,1,1),
InitialWt=c(5.010,5.010,5.010,5.010,5.010,5.000),
FinalWt=c(4.990,4.940,4.840,4.820,4.960,4.970),
InitialFraction=c(1.1071,1.1964,1.0647,1.0005,1.0453,1.1212),
FinalFraction=c(0.3858,0.3504,0.4248,0.3333,0.3417,0.3467))
sites <-data.frame(Day=c(2,4,8,16,32,44),
Treatment=c("CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC", "CC","CC","CC",
"QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC"),
Replicate=c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3),
InitialWt=c(5,5,5,5,5.01,5,5,5.01,5,5,5.01,5,5,5,5,5.01,5,5,5.01,5,5.01,5,5,5.01,5,5.01,5,5,5,5,5.01,5,5.01,5,5.01,5.01),
FinalWt=c(4.65,4.64,4.17,4,4.26,3.7,4.63,4.37,3.72,3.99,3.3,3.75,4.67,4.37,4.12,3.64,3.47,3.3,4.91,4.52,4.54,3.66,2.46,1.82,
4.66,4.25,4.02,3.33,2.29,0.9,4.68,4.58,4.02,3.21,0.9,0.37),
InitialFraction=c(1.0081,1.0898,1.0956,1.006,1.0472,1.0143,1.0972,1.075,1.042,1.1052,1.0843,1.1112,1.1307,1.0295,1.0876,
1.0922,1.0177,1.0061,1.1301,1,1.0449,1.042,1.0661,1.084,1.1228,1.0606,1.0922,1.0006,1.1265,0.6735,1.1719,
1.1156,1.1061,1.0003,1.03,0.177),
FinalFraction=c(0.3229,0.3489,0.4098,0.3345,0.3921,0.347,0.3605,0.3181,0.3762,0.3595,0.3908,0.3366,0.3304,0.2948,0.3787,
0.3511,0.3385,0.3318,0.2833,0.2189,0.3299,0.3175,0.3336,0.2582,0.3676,0.3627,0.3539,0.3414,0.4577,0.2734,
0.3842,0.3237,0.3903,0.311,0.2147,0.0671))
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
end.rcode-->
</div>
<br/>
</div>
<div class="container">
<h4 class="header-light regular-pad">Structure of the input files</h4>
<p><font size="3"><font color='1F618D'><b><i>leafdecay</i></b></font> requires 7 input objects:
<br/><b>Day</b>: Time in which a leaf pack is collected.
<br/><b>Treatment</b>: Different groups evaluated.
<br/><b>Replicate</b>: Number of independent samples deployed in different pools.
<br/><b>InitialWt</b>: Initial mass (dry mass) of the leaf packs.
<br/><b>FinalWt</b>: Final mass (dry mass) of the leaf packs.
<br/><b>Frac.InitialWt</b>: Initial mass of a fraction of the leaf pack to be burned (AFDM).
<br/><b>Frac.FinalWt </b>: Final mass of a fraction of the leaf pack that has been burned (AFDM).
<br/>
<br/>The easiest way to get these objects into <font color='1F618D'><b><i>leafdecay</i></b></font> is to create an Excel file or similar, and then copying it across as in the following example:
</font></p>
<!--begin.rcode
RioPriedras
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 1: Calculating the loss of litter mass by handling</h4>
<p><font size="3">Dried leaves are easily broken in handling. Therefore, extra leaf packs are necessary to account for losses during fashioning, transporting, and placing the packs in the stream. The extra leaf packs will be used to correct by "handling losses", and are often called <b>Control</b>.</font></p>
<p><font size="3">To load the data into <font color='1F618D'><b><i>leafdecay</i></b></font> use: </font></p>
<!--begin.rcode
control <- manipulation(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Treatment= Control)
control
end.rcode-->
<p><font size="3">This means that we lost 1.76334% due to handling.</font></p>
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 2: Percentage of AFDM Remaining</h4>
<p><font size="3">The <i>AFDM()</i> function convert leaf pack dry mass to AFDM remaining (AFDMrem) as percentage. Also, this function converts the values of AFDMrem to LN (Ln.AFDMrem), which makes it easy to compare the remaining leaf mass against time in the following function (<i>slope.k()</i>).</font></p>
<!--begin.rcode
remaining <- AFDM(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Frac.InitialWt= InitialFraction,
Frac.FinalWt= FinalFraction,
Treatment= Treatment,
Day= Day,
Replicate= Replicate)
remaining
remaining
remaining
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 3: Calculating the decomposition rate (<i>-k</i>)</h4>
<p><font size="3"> The <i>slope.k()</i> function relates the LN.AFDM values against time to obtain the slope that is equal to the decomposition rate  (<i>-k</i>). This procedure is run for each replica, which allows subsequent analyzes using the different <i>-k</i>. </font></p>
<!--begin.rcode
slope.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 4: Calculating the r-Squared</h4>
<p><font size="3"> The <i>rsquared.k()</i> function shows the regression fit (LN.AFDM vs time) and the <i>p</i>-value for each replica. </font></p>
<!--begin.rcode
rsquared.k(data = remaining)
end.rcode-->
</div>
rsquared.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
library(tidyverse)
library(dplyr)
library(broom)
library(tidyr)
<!--begin.rcode message=FALSE
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
devtools::install_github("PEGutierrezF/leafdecay")
library(leafdecay)
<!--begin.rcode include=FALSE
control <- data.frame(Day=c(0,0,0,0,0,0),
Treatment=c("Control","Control","Control","Control","Control","Control"),
Replicate=c(1,1,1,1,1,1),
InitialWt=c(5.010,5.010,5.010,5.010,5.010,5.000),
FinalWt=c(4.990,4.940,4.840,4.820,4.960,4.970),
InitialFraction=c(1.1071,1.1964,1.0647,1.0005,1.0453,1.1212),
FinalFraction=c(0.3858,0.3504,0.4248,0.3333,0.3417,0.3467))
sites <-data.frame(Day=c(2,4,8,16,32,44),
Treatment=c("CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC", "CC","CC","CC",
"QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC","QLC"),
Replicate=c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3),
InitialWt=c(5,5,5,5,5.01,5,5,5.01,5,5,5.01,5,5,5,5,5.01,5,5,5.01,5,5.01,5,5,5.01,5,5.01,5,5,5,5,5.01,5,5.01,5,5.01,5.01),
FinalWt=c(4.65,4.64,4.17,4,4.26,3.7,4.63,4.37,3.72,3.99,3.3,3.75,4.67,4.37,4.12,3.64,3.47,3.3,4.91,4.52,4.54,3.66,2.46,1.82,
4.66,4.25,4.02,3.33,2.29,0.9,4.68,4.58,4.02,3.21,0.9,0.37),
InitialFraction=c(1.0081,1.0898,1.0956,1.006,1.0472,1.0143,1.0972,1.075,1.042,1.1052,1.0843,1.1112,1.1307,1.0295,1.0876,
1.0922,1.0177,1.0061,1.1301,1,1.0449,1.042,1.0661,1.084,1.1228,1.0606,1.0922,1.0006,1.1265,0.6735,1.1719,
1.1156,1.1061,1.0003,1.03,0.177),
FinalFraction=c(0.3229,0.3489,0.4098,0.3345,0.3921,0.347,0.3605,0.3181,0.3762,0.3595,0.3908,0.3366,0.3304,0.2948,0.3787,
0.3511,0.3385,0.3318,0.2833,0.2189,0.3299,0.3175,0.3336,0.2582,0.3676,0.3627,0.3539,0.3414,0.4577,0.2734,
0.3842,0.3237,0.3903,0.311,0.2147,0.0671))
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
RioPriedras <- dplyr::bind_rows(control,sites)
end.rcode-->
</div>
<br/>
</div>
<div class="container">
<h4 class="header-light regular-pad">Structure of the input files</h4>
<p><font size="3"><font color='1F618D'><b><i>leafdecay</i></b></font> requires 7 input objects:
<br/><b>Day</b>: Time in which a leaf pack is collected.
<br/><b>Treatment</b>: Different groups evaluated.
<br/><b>Replicate</b>: Number of independent samples deployed in different pools.
<br/><b>InitialWt</b>: Initial mass (dry mass) of the leaf packs.
<br/><b>FinalWt</b>: Final mass (dry mass) of the leaf packs.
<br/><b>Frac.InitialWt</b>: Initial mass of a fraction of the leaf pack to be burned (AFDM).
<br/><b>Frac.FinalWt </b>: Final mass of a fraction of the leaf pack that has been burned (AFDM).
<br/>
<br/>The easiest way to get these objects into <font color='1F618D'><b><i>leafdecay</i></b></font> is to create an Excel file or similar, and then copying it across as in the following example:
</font></p>
<!--begin.rcode
RioPriedras
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 1: Calculating the loss of litter mass by handling</h4>
<p><font size="3">Dried leaves are easily broken in handling. Therefore, extra leaf packs are necessary to account for losses during fashioning, transporting, and placing the packs in the stream. The extra leaf packs will be used to correct by "handling losses", and are often called <b>Control</b>.</font></p>
<p><font size="3">To load the data into <font color='1F618D'><b><i>leafdecay</i></b></font> use: </font></p>
<!--begin.rcode
control <- manipulation(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Treatment= Control)
control
end.rcode-->
<p><font size="3">This means that we lost 1.76334% due to handling.</font></p>
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 2: Percentage of AFDM Remaining</h4>
<p><font size="3">The <i>AFDM()</i> function convert leaf pack dry mass to AFDM remaining (AFDMrem) as percentage. Also, this function converts the values of AFDMrem to LN (Ln.AFDMrem), which makes it easy to compare the remaining leaf mass against time in the following function (<i>slope.k()</i>).</font></p>
<!--begin.rcode
remaining <- AFDM(data= RioPriedras,
InitialWt= InitialWt,
FinalWt= FinalWt,
Frac.InitialWt= InitialFraction,
Frac.FinalWt= FinalFraction,
Treatment= Treatment,
Day= Day,
Replicate= Replicate)
remaining
remaining
remaining
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 3: Calculating the decomposition rate (<i>-k</i>)</h4>
<p><font size="3"> The <i>slope.k()</i> function relates the LN.AFDM values against time to obtain the slope that is equal to the decomposition rate  (<i>-k</i>). This procedure is run for each replica, which allows subsequent analyzes using the different <i>-k</i>. </font></p>
<!--begin.rcode
slope.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
end.rcode-->
</div>
<br/>
<div class="container">
<h4 class="header-light regular-pad">Step 4: Calculating the r-Squared</h4>
<p><font size="3"> The <i>rsquared.k()</i> function shows the regression fit (LN.AFDM vs time) and the <i>p</i>-value for each replica. </font></p>
<!--begin.rcode
rsquared.k(remaining,Treatment, Replicate, Day, Ln.AFDMrem)
end.rcode-->
</div>
<br>
<div class="container">
<h4 class="header-light regular-pad">Step 5: Plotting the data </h4>
<p><font size="3"> Now, we show 5 plots that can be used to explore your data. However, we strongly suggest improving the plots for publications according to the requirements of journals. </font></p>
<br><p><font size="3">Plot of mean (SD) by treatment. </font></p>
<!--begin.rcode fig.show='hide'
plot.A(remaining)
end.rcode-->
<img src="{{ "/assets/img/PlotA.jpg" | relative_url }}">
</div>
<br/>
<div class="container">
<p><font size="3">Plots of replicate by treatment</font></p>
<!--begin.rcode fig.show='hide'
plot.B(remaining)
end.rcode-->
<img src="{{ "/assets/img/PlotB.jpg" | relative_url }}">
</div>
<br/>
<div class="container">
<p><font size="3">Plots of treatment trends</font></p>
<!--begin.rcode fig.show='hide'
plot.C(remaining)
end.rcode-->
<img src="{{ "/assets/img/PlotC.jpg" | relative_url }}">
</div>
<br/>
<div class="container">
<p><font size="3">Plots of replica trends</font></p>
<!--begin.rcode fig.show='hide'
plot.D(remaining)
end.rcode-->
<img src="{{ "/assets/img/PlotD.jpg" | relative_url }}">
</div>
<br/>
<div class="container">
<p><font size="3">Plot by replica</font></p>
<!--begin.rcode fig.show='hide'
plot.E(remaining)
end.rcode-->
<img src="{{ "/assets/img/PlotE.jpg" | relative_url }}">
</div>
<br/>
</div>
<br/>
pi
sin(pi/2)
cos(pi/2)
pi
sin(pi/2)
cos(pi/2)
Wingcrd <- c(59, 55, 53.5, 55, 52.5, 57.5, 53, 55)
Wingcrd
Wingcrd [3]
Wingcrd [1 : 5]
Wingcrd [-2]
sum(Wingcrd)
s.win <- sum(Wingcrd)
s.win
Tarsus <- c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6,21.5)
Head <- c(31.2, 30.4, 30.6, 30.3, 30.3, 30.8, 32.5,NA)
Wt <- c(9.5, 13.8, 14.8, 15.2, 15.5, 15.6, 15.6,15.7)
Bird<-c(Tarsus,Head,Wt)
Bird
Bird1 <- cbind(Tarsus, Head, Wt)
Bird1
Bird2 <- rbind(Tarsus, Head, Wt)
Bird2
x<-c(1:8,NA)
mean(x)
x
citation()
#### Cite specific packages?
```{r}
citation('vegan')
citation('ggplot2')
citation('randomForest')
setwd("D:\Curriculum\19_ Personal webpage\TropicalFreshwaterEcology\_pages\Lectures\data")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures/data")
par(mfrow=c(1,2))
plot(rda_tree_all, scaling=1, main="Odonata in Urban ponds, scaling=1")
constrained_eig <- rda_tree_all$CCA$eig/rda_tree_all$tot.chi*100
screeplot(rda_tree_all)
rda_tree_all = rda(species_2 ~ temperature + oxygen + pH +
conductivity + plants, data= env_1, scale=T)
species=read.csv("data/RDA_species.csv", header=T, row.names=NULL, sep=",")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures/data")
species=read.csv("data/RDA_species.csv", header=T, row.names=NULL, sep=",")
env=read.csv("data/RDA_environmetal.csv", header=T, row.names=NULL, sep=",")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures/data")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures/data")
library(ggplot2)
library(dplyr)
library(vegan)
<br/>
#### 2. Segundo paso: cargar los datos.
```{r}
species=read.csv("data/RDA_species.csv", header=T, row.names=NULL, sep=",")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures/data")
library(ggplot2)
library(dplyr)
library(vegan)
<br/>
#### 2. Segundo paso: cargar los datos.
```{r}
species=read.csv("data/RDA_species.csv", header=T, row.names=NULL, sep=",")
env=read.csv("data/RDA_environmetal.csv", header=T, row.names=NULL, sep=",")
setwd("D:/Curriculum/19_ Personal webpage/TropicalFreshwaterEcology/_pages/Lectures")
species=read.csv("data/RDA_species.csv", header=T, row.names=NULL, sep=",")
env=read.csv("data/RDA_environmetal.csv", header=T, row.names=NULL, sep=",")
